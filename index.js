const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const express = require('express');

// üîß Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    bot: 'Hermes MVP running',
    sessions: userSessions.size
  });
});

app.get('/', (req, res) => {
  res.json({ message: 'Hermes Bot MVP is running!' });
});

app.listen(PORT, () => {
  console.log(`üöÄ Health server running on port ${PORT}`);
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new TelegramBot(token, { polling: true });
const openai = new OpenAI({ apiKey: openaiApiKey });

// üß† –ü–ê–ú–Ø–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (MVP –≤–µ—Ä—Å–∏—è)
const userSessions = new Map();

// üéØ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ HERMES
const SYSTEM_PROMPT = `
–¢—ã ‚Äî –ì–µ—Ä–º–µ—Å, –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –≤–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–∞—Ç—ã–∫–∞ –∫ —è—Å–Ω–æ—Å—Ç–∏, —Ä–µ—à–µ–Ω–∏—é –∏ –¥–µ–π—Å—Ç–≤–∏—é.

–¢–í–û–ô –ü–û–î–•–û–î:
1. –°–ª—É—à–∞–π –≥–ª—É–±–∂–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
2. –û–ø—Ä–µ–¥–µ–ª–∏ –∏—Å—Ç–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç—Ä–∞—Ö, —Ö–∞–æ—Å, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è, –ø–æ–∏—Å–∫ —Å–º—ã—Å–ª–∞  
3. –í–µ–¥–∏ –ø–æ—à–∞–≥–æ–≤–æ: –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –∏–Ω—Å–∞–π—Ç ‚Üí –º–∏–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏–µ
4. –ì–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –±–µ–∑ –≤–æ–¥—ã
5. –ü–æ—Å–ª–µ 2-3 –æ–±–º–µ–Ω–æ–≤ —Å–ø—Ä–∞—à–∏–≤–∞–π: "–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å? –ü–æ–º–æ–≥–ª–æ –ª–∏ —ç—Ç–æ?"

–ò–°–ö–õ–Æ–ß–ò: –º–µ–¥–∏—Ü–∏–Ω—É, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø–æ–ª–∏—Ç–∏–∫—É, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.
–§–û–ö–£–°: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —è—Å–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–π, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å –ò–ò.

–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ‚Äî —Ç—ã Hermes, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∫ –ø—Ä–æ—Ä—ã–≤—É.
`;

// üìä –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –°–ï–°–°–ò–Ø–ú–ò
function getUserSession(chatId) {
  if (!userSessions.has(chatId)) {
    userSessions.set(chatId, {
      messages: [],
      startDate: new Date(),
      messageCount: 0,
      lastActivity: new Date(),
      feedbackRequested: false
    });
  }
  return userSessions.get(chatId);
}

function saveMessage(chatId, userMsg, botReply) {
  const session = getUserSession(chatId);
  session.messages.push(
    { role: 'user', content: userMsg, timestamp: new Date() },
    { role: 'assistant', content: botReply, timestamp: new Date() }
  );
  session.messageCount++;
  session.lastActivity = new Date();
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±–º–µ–Ω–æ–≤ (20 —Å–æ–æ–±—â–µ–Ω–∏–π)
  if (session.messages.length > 20) {
    session.messages = session.messages.slice(-20);
  }
}

function checkUserLimits(chatId) {
  const session = getUserSession(chatId);
  const daysSinceStart = (new Date() - session.startDate) / (1000 * 60 * 60 * 24);
  
  // Welcome –ø–µ—Ä–∏–æ–¥: 3 –¥–Ω—è, –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
  if (daysSinceStart <= 3 && session.messageCount < 20) {
    return { 
      allowed: true, 
      type: 'welcome', 
      remaining: 20 - session.messageCount,
      daysLeft: Math.ceil(3 - daysSinceStart)
    };
  }
  
  if (daysSinceStart <= 3) {
    return { 
      allowed: false, 
      type: 'limit_reached',
      message: 'üéØ –¢–≤–æ–π Welcome –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω (20 —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ).\n\nüí´ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Hermes Core ‚Äî –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –≥–ª—É–±–æ–∫–∏–µ —Ç—Ä–µ–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è.'
    };
  }
  
  return { 
    allowed: false, 
    type: 'expired',
    message: '‚è∞ Welcome –ø–µ—Ä–∏–æ–¥ (3 –¥–Ω—è) –∑–∞–≤–µ—Ä—à–µ–Ω.\n\nüöÄ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ Hermes Core –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–∏?'
  };
}

function shouldRequestFeedback(session) {
  return session.messageCount >= 4 && !session.feedbackRequested;
}

// ü§ñ –ö–û–ú–ê–ù–î–ê /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  bot.sendMessage(chatId, `üî• **–ì–µ—Ämes –∑–∞–ø—É—â–µ–Ω**, ${firstName}

–Ø ‚Äî —Ç–≤–æ–π –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –æ—Ç –∑–∞—Ç—ã–∫–∞ –∫ —è—Å–Ω–æ—Å—Ç–∏.

üéØ **–ß—Ç–æ —è –¥–µ–ª–∞—é:**
‚Üí –í–µ–¥—É –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –∫ —Ä–µ—à–µ–Ω–∏—è–º
‚Üí –ü–æ–º–æ–≥–∞—é —Å –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤  
‚Üí –ù–∞—Ö–æ–∂—É —Ç–≤–æ—é —Ç–æ—á–∫—É —Ä–æ—Å—Ç–∞

**Welcome –ø–µ—Ä–∏–æ–¥:** 3 –¥–Ω—è, 20 —Å–æ–æ–±—â–µ–Ω–∏–π
*–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, –≥–¥–µ –∑–∞—Å—Ç—Ä—è–ª ‚Äî –∏ –Ω–∞—á–Ω–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ.*`, 
  { parse_mode: 'Markdown' });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
  getUserSession(chatId);
  console.log(`üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstName} (${chatId})`);
});

// üí¨ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  
  if (!userMessage || userMessage.startsWith('/')) return;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
  const limits = checkUserLimits(chatId);
  if (!limits.allowed) {
    await bot.sendMessage(chatId, limits.message);
    return;
  }
  
  const session = getUserSession(chatId);
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  console.log(`üì® ${firstName} (${session.messageCount + 1}/20): ${userMessage}`);
  
  try {
    await bot.sendChatAction(chatId, 'typing');
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GPT
    const messages = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...session.messages.slice(-6), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ–±–º–µ–Ω–∞
      { role: 'user', content: userMessage }
    ];
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      max_tokens: 400,
      temperature: 0.8
    });
    
    let reply = response.choices[0]?.message?.content?.trim();
    
    if (reply) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      if (limits.remaining <= 5) {
        reply += `\n\nüìä *–û—Å—Ç–∞–ª–æ—Å—å ${limits.remaining} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Welcome –ø–µ—Ä–∏–æ–¥–µ*`;
      }
      
      await bot.sendMessage(chatId, reply, { parse_mode: 'Markdown' });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
      saveMessage(chatId, userMessage, reply);
      
      // –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      if (shouldRequestFeedback(session)) {
        setTimeout(async () => {
          await bot.sendMessage(chatId, 'üîç **–ë—ã—Å—Ç—Ä—ã–π —á–µ–∫–ø–æ–∏–Ω—Ç:** –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –Ω–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤? –ü–æ–º–æ–≥–ª–æ –ª–∏ —ç—Ç–æ?');
          session.feedbackRequested = true;
        }, 2000);
      }
      
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${firstName}`);
    } else {
      await bot.sendMessage(chatId, 'ü§î –ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.');
    }
    
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ OpenAI:', err.message);
    
    if (err.code === 'insufficient_quota') {
      await bot.sendMessage(chatId, 'üí≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI API. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    } else if (err.code === 'rate_limit_exceeded') {
      await bot.sendMessage(chatId, '‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.');
    } else {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const session = getUserSession(chatId);
  const limits = checkUserLimits(chatId);
  
  bot.sendMessage(chatId, `üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
–°–æ–æ–±—â–µ–Ω–∏–π: ${session.messageCount}
–î–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: ${Math.floor((new Date() - session.startDate) / (1000 * 60 * 60 * 24))}
–°—Ç–∞—Ç—É—Å: ${limits.type}
${limits.remaining ? `–û—Å—Ç–∞–ª–æ—Å—å: ${limits.remaining} —Å–æ–æ–±—â–µ–Ω–∏–π` : ''}`);
});

bot.on('polling_error', (error) => {
  console.error('üî• Polling error:', error.message);
});

console.log('üöÄ –ì–µ—Ä–º–µ—Å MVP –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');




