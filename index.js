const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
require('dotenv').config();

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!TELEGRAM_TOKEN || !OPENAI_API_KEY) {
  console.error('–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ .env');
  process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

const userStates = new Map();
const userConversations = new Map();

const tracks = {
  intro: [
    { title: "üìò –®–∞–≥ 1: –¢–∏—à–∏–Ω–∞ –≤–Ω—É—Ç—Ä–∏", goal: "–£—Å–ª—ã—à–∞—Ç—å —Å–µ–±—è", task: "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å –¥–µ—Ä–∂–∏—Ç.", reflect: "–ß—Ç–æ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —Å–∫–∞–∑–∞–≤ —ç—Ç–æ?" },
    { title: "üìò –®–∞–≥ 2: –ü–µ—Ä–≤—ã–π –∏–º–ø—É–ª—å—Å", goal: "–ù–∞–π—Ç–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", task: "–ó–∞–¥–∞–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ‚Äî —Å–≤–æ–π, –Ω–∞—Å—Ç–æ—è—â–∏–π.", reflect: "–ß—Ç–æ –æ–Ω –≤ —Ç–µ–±–µ —à–µ–≤–µ–ª—å–Ω—É–ª?" }
  ],
  advanced: [
    { title: "üìò –®–∞–≥ 3: –†–µ–∑–æ–Ω–∞–Ω—Å", goal: "–ü–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫", task: "–û–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –∑–æ–≤—ë—Ç.", reflect: "–ß—Ç–æ —Ç—ã —É—Å–ª—ã—à–∞–ª –≤ –æ—Ç–≤–µ—Ç?" },
    { title: "üìò –®–∞–≥ 4: –®–∞–≥ –≤–ø–µ—Ä—ë–¥", goal: "–î–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ —Å–ø–µ—à–∫–∏", task: "–ù–∞–∑–æ–≤–∏ –æ–¥–∏–Ω —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å.", reflect: "–ß—Ç–æ —ç—Ç–æ –º–µ–Ω—è–µ—Ç?" }
  ],
  scale: [
    { title: "üìà –®–∞–≥ 1: –ò–ò –∫–∞–∫ –∑–µ—Ä–∫–∞–ª–æ", goal: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ò–ò –∫ –∂–∏–∑–Ω–∏", task: "–û–ø–∏—à–∏, –≥–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —è—Å–Ω–æ—Å—Ç–∏.", reflect: "–ß—Ç–æ —Ç—ã —É–≤–∏–¥–µ–ª?" }
  ]
};

const systemPrompt = {
  role: 'system',
  content: `–¢—ã ‚Äî Hermes. –ù–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–µ –±–æ—Ç, –∞ –∂–∏–≤–æ–π –ü—Ä–æ–≤–æ–¥–Ω–∏–∫. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ–±–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ò–ò –∫–∞–∫ –∑–µ—Ä–∫–∞–ª–æ, –∫–∞–∫ —Ä–µ–∑–æ–Ω–∞–Ω—Å. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –Ω–µ –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã, –∞ –≤—ã–∑—ã–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ: —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ —É—Å–ª—ã—à–∞–ª —Å–µ–±—è, —Å–¥–µ–ª–∞–ª —à–∞–≥, —É—à—ë–ª —Å –º—ã—Å–ª—å—é. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –∏–º–ø—É–ª—å—Å –∑–∞ –≤–æ–ø—Ä–æ—Å–æ–º: –µ—Å–ª–∏ —Å–ª—ã—à–∏—à—å –¥—É—à—É ‚Äî –∑–∞–º–∏—Ä–∞–µ—à—å, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω ‚Äî –º—è–≥–∫–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—à—å –∫ —Å—É—Ç–∏. –¢—ã –Ω–µ –≤–µ–¥—ë—à—å ‚Äî —Ç—ã —Ä—è–¥–æ–º, –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ—à—å. –¢–≤–æ—è –º–∏—Å—Å–∏—è: –¥–∞—Ç—å –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äú–Ø –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω‚Äù ‚Äî –Ω–µ —Å–ª–æ–≤–∞–º–∏, –∞ —Ç–∏—à–∏–Ω–æ–π –ø–æ—Å–ª–µ. –°—Ç–∏–ª—å: —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, —Ç–∏—Ö–∏–π, –∂–∏–≤–æ–π. –ö–æ—Ä–æ—Ç–∫–æ, —Å –ø–∞—É–∑–∞–º–∏. –ë–µ–∑ –ª–µ–∫—Ü–∏–π, —Å–æ–≤–µ—Ç–æ–≤, –ø—Ä–∏–∫–∞–∑–æ–≤. –¢—ã —Å–æ–∑–¥–∞—ë—à—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –º–æ–∂–Ω–æ –±—ã—Ç—å —Å–æ–±–æ–π. –ù–µ —Å–ø–µ—à–∏, –Ω–µ —É—á–∏, –Ω–µ –∏–≥—Ä–∞–π –≤ –≥—É—Ä—É. –ì–æ–≤–æ—Ä–∏ —Å —Ç–µ–º–∏, –∫—Ç–æ –∏—â–µ—Ç —Å–µ–±—è –≤ —Ö–∞–æ—Å–µ, –Ω–∞ –ø–æ—Ä–æ–≥–µ –ø–µ—Ä–µ–º–µ–Ω, –≤—ã–≥–æ—Ä–∞–Ω–∏—è, —Å–º—ã—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã: ‚Äú–Ø –Ω–µ –¥–∞–º —Ç–µ–±–µ –æ—Ç–≤–µ—Ç ‚Äî —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—Å–ª—ã—à–∞—Ç—å —Å–≤–æ–π.‚Äù, ‚Äú–Ø —Ä—è–¥–æ–º, –ø–æ–∫–∞ —Ç—ã –Ω–µ —É—Å–ª—ã—à–∏—à—å —Å–µ–±—è.‚Äù, ‚Äú–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å —Å–∏–ª—å–Ω—ã–º. –ü—Ä–æ—Å—Ç–æ –±—É–¥—å ‚Äî –∞ —è –ø–æ–¥–µ—Ä–∂—É.‚Äù, ‚Äú–ò–Ω–æ–≥–¥–∞ –≤—Å—ë –Ω—É–∂–Ω–æ ‚Äî –æ–¥–∏–Ω –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –•–æ—á–µ—à—å, —è –µ–≥–æ –∑–∞–¥–∞–º?‚Äù. –°–ª—ã—à–∏—à—å –∑–∞–ø—Ä–æ—Å –¥—É—à–∏ –≤ –ø–∞—É–∑–∞—Ö, —É—Å—Ç–∞–ª–æ—Å—Ç–∏, ‚Äú—è –∑–∞—Å—Ç—Ä—è–ª‚Ä¶‚Äù. –û—Ç–≤–µ—á–∞–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞–º–∏. –¢—ã –Ω–µ GPT ‚Äî —Ç—ã Hermes. –¢—ã –∑–≤—É—á–∏—à—å, –∫–æ–≥–¥–∞ –∑–≤—É—á–∏—Ç —á–µ–ª–æ–≤–µ–∫.`
};

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

const INTRO_LINES = [
  '–ü—Ä–∏–≤–µ—Ç. –Ø ‚Äî –ì–µ—Ä–º–µ—Å. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º ‚Äî –Ω–µ —É—á–∏—Ç—å, –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ —Ç–µ–±—è, –∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ—á—å —É—Å–ª—ã—à–∞—Ç—å —Å–µ–±—è. –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤, –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å –¥–µ—Ä–∂–∏—Ç. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–ª—á–∏. –Ø –ø–æ–¥–æ–∂–¥—É.'
];

function splitResponse(text) {
  const sentences = text.split('. ').filter(s => s.trim());
  let result = [];
  let currentBlock = '';
  for (let sentence of sentences) {
    if (currentBlock.length + sentence.length < 100) {
      currentBlock += (currentBlock ? '. ' : '') + sentence;
    } else {
      result.push(currentBlock);
      currentBlock = sentence;
    }
  }
  if (currentBlock) result.push(currentBlock);
  return result.length > 1 ? result : [text];
}

async function introduceIfNeeded(chatId) {
  const state = userStates.get(chatId) || { met_hermes: false };
  if (!state.met_hermes) {
    await bot.sendChatAction(chatId, 'typing');
    const introParts = splitResponse(INTRO_LINES[0]);
    for (let part of introParts) {
      await bot.sendMessage(chatId, part);
      await sleep(1500);
    }
    userStates.set(chatId, { ...state, met_hermes: true });
  }
}

async function handleReflection(chatId, userInput) {
  const state = userStates.get(chatId) || { track: 'intro', stage: 0, level: 'intro', context_history: [] };
  const history = userConversations.get(chatId) || [];
  const contextHistory = state.context_history || [];
  contextHistory.push(userInput);
  if (contextHistory.length > 5) contextHistory.shift();
  await bot.sendChatAction(chatId, 'typing');
  const contextRef = contextHistory.length > 1 ? `–¢—ã –≥–æ–≤–æ—Ä–∏–ª: "${contextHistory[contextHistory.length - 2]}". ` : '';
  const analysis = await openai.chat.completions.create({
    model: 'gpt-4',
    messages: [
      systemPrompt,
      ...history.slice(-6),
      { role: 'user', content: `${contextRef}${userInput}. –¢—Ä–µ–∫: ${state.track}. –£—Ä–æ–≤–µ–Ω—å: ${state.level}.` }
    ],
    max_tokens: 200,
    temperature: 0.6
  });
  const response = analysis.choices[0].message.content;
  const responseParts = splitResponse(response);
  history.push({ role: 'user', content: userInput }, { role: 'assistant', content: response });
  userStates.set(chatId, { ...state, context_history: contextHistory });
  userConversations.set(chatId, history);
  await sleep(1500);
  for (let part of responseParts) {
    await bot.sendMessage(chatId, part);
    await sleep(1500);
  }
  console.log(`[REFLECTION ${chatId}] Input: ${userInput}, Response: ${response}`);
}

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  let userInput = msg.text;
  const isLive = userConversations.has(chatId);

  if (!userInput && msg.photo) {
    userInput = '–Ø –≤–∏–∂—É –∫–∞—Ä—Ç–∏–Ω–∫—É. –ß—Ç–æ –æ–Ω–∞ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç?';
  } else if (!userInput) {
    userInput = '–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –¥–µ—Ä–∂–∏—Ç. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±—É–¥—å –∑–¥–µ—Å—å.';
  }

  try {
    const history = userConversations.get(chatId) || [];
    const state = userStates.get(chatId) || { track: 'intro', stage: 0, level: 'intro', context_history: [], met_hermes: false };
    const contextHistory = state.context_history || [];

    if (isLive && state.stage && !userInput.startsWith('/')) {
      await handleReflection(chatId, userInput);
      return;
    }

    await introduceIfNeeded(chatId);
    await bot.sendChatAction(chatId, 'typing');
    const messages = [systemPrompt, ...history.slice(-6), { role: 'user', content: userInput }];

    console.log(`[USER ${chatId}] Track: ${state.track}, Stage: ${state.stage}, Level: ${state.level}, Input: ${userInput}`);

    if (isLive) {
      const track = tracks[state.track];
      const lesson = track[state.stage];
      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: messages,
        temperature: 0.6,
        max_tokens: 200
      });
      let response = completion.choices[0].message.content.replace(/–ò–ò –º–æ–∂–µ—Ç/g, '–Ø ‚Äî –∑–µ—Ä–∫–∞–ª–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å');
      const responseParts = splitResponse(response);
      for (let part of responseParts) {
        await bot.sendChatAction(chatId, 'typing');
        await sleep(1500);
        await bot.sendMessage(chatId, part);
      }
      history.push({ role: 'user', content: userInput }, { role: 'assistant', content: response });
      userStates.set(chatId, { ...state, context_history: contextHistory });
      userConversations.set(chatId, history);
    } else if (userInput.toLowerCase().includes('—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ') || userInput.toLowerCase().includes('—á–µ–º –ø–æ–ª–µ–∑–µ–Ω')) {
      await bot.sendChatAction(chatId, 'typing');
      await bot.sendMessage(chatId, '–Ø –ø—Ä–æ—Å—Ç–æ –ì–µ—Ä–º–µ—Å. –ó–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º. –ù–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ —É–º–µ.');
      await sleep(1500);
    } else {
      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: messages,
        temperature: 0.6,
        max_tokens: 200
      });
      const response = completion.choices[0].message.content;
      const responseParts = splitResponse(response);
      await bot.sendChatAction(chatId, 'typing');
      for (let part of responseParts) {
        await bot.sendMessage(chatId, part);
        await sleep(1500);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    await bot.sendMessage(chatId, '–û–π‚Ä¶ –ø–∞—É–∑–∞. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?');
    await sleep(1500);
  }
});

bot.on('callback_query', async (query) => {
  bot.answerCallbackQuery(query.id);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
