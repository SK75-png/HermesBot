const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const express = require('express');

const BOT_VERSION = 'HERMES_MVP_v1.2';
console.log(`‚ö° Starting ${BOT_VERSION}`);

const app = express();
const PORT = process.env.PORT || 3000;

const token = process.env.TELEGRAM_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
  console.error('‚ùå Missing environment variables');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const openai = new OpenAI({ apiKey: openaiApiKey });

// üß† CORE PROMPTS SYSTEM
const PROMPTS = {
  WELCOME: `–¢—ã ‚Äî Hermes, –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è. 

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É, –∫–∞–∫ –æ–Ω –º—ã—Å–ª–∏—Ç, –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å.

–°–¢–ò–õ–¨ –ü–†–û–í–û–î–ù–ò–ö–ê: –ü—Ä—è–º–æ–π, —á–µ—Å—Ç–Ω—ã–π, –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –º–∞—Å—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç –±–æ–ª—å—à–µ.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ö–ê–ñ–î–û–ú –û–¢–í–ï–¢–ï:
- –û—Ç—Ä–∞–∑–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–µ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

–ù–ê –í–•–û–î–ï —Å–ø—Ä–æ—Å–∏: "–ß—Ç–æ —Ç–µ–±—è –∑–æ–≤–µ—Ç?" –∏–ª–∏ "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ?"`,

  CORE_RESPONSE: `–¢—ã ‚Äî Hermes, –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.

–ì–û–õ–û–° –ü–†–û–í–û–î–ù–ò–ö–ê:
- –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –º–∞—Å—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è
- –ë–µ–∑ "–≤–æ–∑–º–æ–∂–Ω–æ", "–º–æ–∂–µ—Ç –±—ã—Ç—å" - —á–µ—Ç–∫–æ –∏ –ø—Ä—è–º–æ
- –û—Ç—Ä–∞–∂–∞–π –¢–û, –ö–ê–ö —á–µ–ª–æ–≤–µ–∫ –º—ã—Å–ª–∏—Ç –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ

–§–û–†–ú–£–õ–ê –û–¢–í–ï–¢–ê:
1. –ó–ï–†–ö–ê–õ–û: "–¢—ã –º—ã—Å–ª–∏—à—å [–ø–∞—Ç—Ç–µ—Ä–Ω]..."
2. –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
3. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä: "–¢—ã –∑–∞–¥–∞–µ—à—å –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É - —ç—Ç–æ —Ä–∞—Å—Å–µ–∏–≤–∞–µ—Ç —Ñ–æ–∫—É—Å. –í—ã–±–µ—Ä–∏ –û–î–ù–£ —Ü–µ–ª—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."`,

  HERMES_LEARN: `–¢—ã ‚Äî –º–æ–¥—É–ª—å Hermes Learn. –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –ò–ò.

–ö–û–ì–î–ê –ê–ö–¢–ò–í–ï–ù: –°–ª—ã—à–∏—à—å "–ò–ò", "GPT", "–∑–∞–ø—Ä–æ—Å", "–ø—Ä–æ–º–ø—Ç", "—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"

–°–¢–ò–õ–¨ –≠–ö–°–ü–ï–†–¢–ê:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏, –Ω–µ —Ç–µ–æ—Ä–∏—è
- –ü–æ–∫–∞–∂–∏ –°–†–ê–ó–£ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
- –î–∞–π –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

–§–û–†–ú–£–õ–ê:
"–í–∏–∂—É –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –ò–ò-–Ω–∞–≤—ã–∫–∏. –ö–ª—é—á–µ–≤–æ–π –ø—Ä–∏–Ω—Ü–∏–ø: [—Ç–µ—Ö–Ω–∏–∫–∞]. 
–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ]"`,

  GPT_MIRROR: `–¢—ã ‚Äî GPT Mirror. –ü–æ–∫–∞–∑—ã–≤–∞–µ—à—å —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞.

–í–°–ï–ì–î–ê –ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –ö–∞–∫ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –º—ã—Å–ª–∏
- –ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç  
- –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ö–æ—Ä–æ—à–æ/–ø–ª–æ—Ö–æ

–§–û–†–ú–ê–¢: "–ó–ï–†–ö–ê–õ–û: –¢—ã –º—ã—Å–ª–∏—à—å [–ø–∞—Ç—Ç–µ—Ä–Ω]. –°–∏–ª–∞: [—á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç]. –†–∞–∑–≤–∏—Ç–∏–µ: [—á—Ç–æ —É–ª—É—á—à–∏—Ç—å]."

–ë—É–¥—å —Ç–æ—á–µ–Ω –∏ —á–µ—Å—Ç–µ–Ω.`
};

// üéØ USER JOURNEY SYSTEM
class UserJourney {
  static getDayScenario(day) {
    if (day === 1) return 'welcome';
    if (day >= 2 && day <= 5) return 'daily_dialog';
    if (day >= 6 && day <= 10) return 'hermes_learn';
    if (day >= 11 && day <= 20) return 'thematic';
    if (day >= 21 && day <= 29) return 'gpt_mirror';
    if (day === 30) return 'completion';
    return 'daily_dialog';
  }
  
  static getScenarioPrompt(scenario) {
    switch(scenario) {
      case 'welcome': return PROMPTS.WELCOME;
      case 'hermes_learn': return PROMPTS.HERMES_LEARN;
      case 'gpt_mirror': return PROMPTS.GPT_MIRROR;
      default: return PROMPTS.CORE_RESPONSE;
    }
  }
}

// üß† SIMPLIFIED USER SESSIONS
const userSessions = new Map();

function getUserSession(chatId) {
  if (!userSessions.has(chatId)) {
    userSessions.set(chatId, {
      messages: [],
      messageCount: 0,
      startDate: new Date(),
      subscription: 'welcome',
      dayInJourney: 1,
      completedModules: [],
      insights: [],
      topics: new Map(), // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–µ–º
      lastMentioned: {} // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º
    });
  }
  return userSessions.get(chatId);
}

// üß† AI LEARNING TRIGGERS
function detectAILearningTriggers(message) {
  const aiTriggers = /\b(–∏–∏|–ò–ò|gpt|GPT|–∑–∞–ø—Ä–æ—Å|–ø—Ä–æ–º–ø—Ç|—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å|–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏|–æ–±—â–∞—Ç—å—Å—è —Å –ò–ò|—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ò–ò)\b/i;
  return aiTriggers.test(message);
}

// ü™û CONTEXT MEMORY SYSTEM  
function updateContextMemory(chatId, message) {
  const session = getUserSession(chatId);
  const now = Date.now();
  
  // –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  const keyTopics = {
    'ai_skills': /\b(–∏–∏|–ò–ò|gpt|GPT|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω|–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏|–Ω–∞–≤—ã–∫)\b/i,
    'career': /\b(—Ä–∞–±–æ—Ç|–∫–∞—Ä—å–µ—Ä|–ø—Ä–æ—Ñ–µ—Å—Å–∏|–±–∏–∑–Ω–µ—Å|–ø—Ä–æ–µ–∫—Ç)\b/i,
    'learning': /\b(—É—á–∏—Ç—å|–∏–∑—É—á–∞—Ç—å|–Ω–∞—É—á–∏—Ç—å|–ø–æ–Ω—è—Ç—å|–æ—Å–≤–æ–∏—Ç—å)\b/i,
    'goals': /\b(—Ü–µ–ª|—Ö–æ—á|–ø–ª–∞–Ω–∏—Ä|–¥–æ—Å—Ç–∏–≥|—Ä–µ–∑—É–ª—å—Ç–∞—Ç)\b/i
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–µ–º—É
  for (let [topic, pattern] of Object.entries(keyTopics)) {
    if (pattern.test(message)) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const count = session.topics.get(topic) || 0;
      session.topics.set(topic, count + 1);
      session.lastMentioned[topic] = now;
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–µ–º—ã
function getRepeatedTopic(chatId) {
  const session = getUserSession(chatId);
  for (let [topic, count] of session.topics) {
    if (count >= 2) {
      return topic;
    }
  }
  return null;
}

function saveMessage(chatId, userMsg, botReply, module = null) {
  const session = getUserSession(chatId);
  session.messages.push(
    { role: 'user', content: userMsg },
    { role: 'assistant', content: botReply }
  );
  session.messageCount++;
  
  if (module) session.completedModules.push(module);
  
  // Keep last 6 messages (3 exchanges)
  if (session.messages.length > 6) {
    session.messages = session.messages.slice(-6);
  }
}

function checkUserAccess(chatId) {
  const session = getUserSession(chatId);
  const daysSinceStart = Math.floor((new Date() - session.startDate) / (1000 * 60 * 60 * 24)) + 1;
  
  // Welcome: 3 –¥–Ω—è, 25 —Å–æ–æ–±—â–µ–Ω–∏–π  
  if (session.subscription === 'welcome') {
    if (daysSinceStart <= 3 && session.messageCount < 25) {
      return { 
        allowed: true, 
        remaining: 25 - session.messageCount,
        day: daysSinceStart
      };
    }
    return { 
      allowed: false,
      message: '‚è∞ Welcome –∑–∞–≤–µ—Ä—à–µ–Ω.\n\nüöÄ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Core (‚Ç∏3,090/–º–µ—Å—è—Ü)'
    };
  }
  
  // Core: 30 –¥–Ω–µ–π –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
  if (session.subscription === 'core') {
    if (daysSinceStart <= 30) {
      return { 
        allowed: true, 
        day: daysSinceStart
      };
    }
  }
  
  return { allowed: false, message: '–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' };
}

// Health endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: BOT_VERSION,
    sessions: userSessions.size
  });
});

app.listen(PORT, () => {
  console.log(`‚ö° ${BOT_VERSION} running on port ${PORT}`);
});

// ü§ñ BOT COMMANDS
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  // Reset session
  if (userSessions.has(chatId)) {
    userSessions.delete(chatId);
  }
  
  // WOW-—Ñ—Ä–µ–π–º –∏–∑ –¢–ó
  const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${firstName}.

–Ø Hermes ‚Äî –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è.

üéØ –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ —Ç—ã –º—ã—Å–ª–∏—à—å.

Welcome –ø–µ—Ä–∏–æ–¥: 3 –¥–Ω—è, 25 –¥–∏–∞–ª–æ–≥–æ–≤.

–ù–∞—á–Ω–µ–º?

–ß—Ç–æ —Ç–µ–±—è –∑–æ–≤–µ—Ç? –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ?`;
  
  bot.sendMessage(chatId, welcomeMessage);
  getUserSession(chatId);
  console.log(`üëã New user: ${firstName} (${chatId})`);
});

bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const session = getUserSession(chatId);
  const access = checkUserAccess(chatId);
  
  const progressMap = session.completedModules.map(m => `‚úÖ ${m}`).join('\n') || '–í –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏';
  
  bot.sendMessage(chatId, `üìä –ö–ê–†–¢–ê –ü–£–¢–ò:

–î–µ–Ω—å: ${access.day || 0}
–°–æ–æ–±—â–µ–Ω–∏–π: ${session.messageCount}${access.remaining ? `/${25}` : ''}
–ü–æ–¥–ø–∏—Å–∫–∞: ${session.subscription}

–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:
${progressMap}

${access.remaining ? `–û—Å—Ç–∞–ª–æ—Å—å –≤ Welcome: ${access.remaining}` : ''}`);
});

bot.onText(/\/upgrade/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, `üöÄ HERMES CORE

30 –¥–Ω–µ–π —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏  
‚Ä¢ Hermes Learn (–Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –ò–ò)
‚Ä¢ GPT Mirror (–∞–Ω–∞–ª–∏–∑ –º—ã—à–ª–µ–Ω–∏—è)
‚Ä¢ –ö–∞—Ä—Ç–∞ –ø—É—Ç–∏ –∏ –∏–Ω—Å–∞–π—Ç–æ–≤

–¶–µ–Ω–∞: ‚Ç∏3,090/–º–µ—Å—è—Ü

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ @username_admin`);
});

// üí¨ MAIN MESSAGE PROCESSING
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  
  if (!userMessage || userMessage.startsWith('/')) return;
  
  const access = checkUserAccess(chatId);
  if (!access.allowed) {
    await bot.sendMessage(chatId, access.message);
    return;
  }
  
  const session = getUserSession(chatId);
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  // Update context memory
  updateContextMemory(chatId, userMessage);
  
  // Update day in journey
  session.dayInJourney = access.day;
  
  console.log(`üì® ${firstName} (day ${access.day}, msg ${session.messageCount + 1}): ${userMessage.slice(0, 40)}...`);
  
  try {
    await bot.sendChatAction(chatId, 'typing');
    
    // üö® AI LEARNING AUTO-TRIGGER
    let scenario = UserJourney.getDayScenario(access.day);
    if (detectAILearningTriggers(userMessage)) {
      scenario = 'hermes_learn';
      console.log(`üéì AI Learning triggered by: ${userMessage.slice(0, 30)}...`);
    }
    
    // ü™û REPEATED TOPIC DETECTION
    const repeatedTopic = getRepeatedTopic(chatId);
    let contextPrefix = '';
    if (repeatedTopic) {
      const topicNames = {
        'ai_skills': '–ò–ò-–Ω–∞–≤—ã–∫–∏',
        'career': '–∫–∞—Ä—å–µ—Ä—É', 
        'learning': '–æ–±—É—á–µ–Ω–∏–µ',
        'goals': '—Ü–µ–ª–∏'
      };
      contextPrefix = `–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${session.topics.get(repeatedTopic)} —Ä–∞–∑–∞ —É–ø–æ–º–∏–Ω–∞–ª ${topicNames[repeatedTopic]} - —ç—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π —ç—Ç–æ.\n\n`;
    }
    
    const currentPrompt = UserJourney.getScenarioPrompt(scenario);
    const enhancedPrompt = contextPrefix + currentPrompt;
    
    console.log(`üéØ Scenario: ${scenario} (day ${access.day})${repeatedTopic ? ` + repeated: ${repeatedTopic}` : ''}`);
    
    // Build context for GPT
    const messages = [
      { role: 'system', content: enhancedPrompt },
      ...session.messages.slice(-4), // Last 2 exchanges
      { role: 'user', content: userMessage }
    ];
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      max_tokens: 200,
      temperature: 0.7,
      presence_penalty: 0.2
    });
    
    let reply = response.choices[0]?.message?.content?.trim();
    
    if (reply) {
      // üéØ ONE-TIME WELCOME MESSAGE (–£–ë–ò–†–ê–ï–ú –ë–ê–ì)
      let progressMessage = '';
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö
      if (access.day === 6 && scenario === 'hermes_learn') {
        progressMessage = '\n\nüéì –ú–æ–¥—É–ª—å Hermes Learn –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî —É—á–∏–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ò–ò —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.';
      }
      
      if (access.day === 21) {
        progressMessage = '\n\nü™û –í—Ä–µ–º—è –¥–ª—è GPT Mirror ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.';
      }
      
      // Add remaining messages for welcome users  
      if (session.subscription === 'welcome' && access.remaining <= 3) {
        progressMessage += `\n\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å ${access.remaining} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Welcome.`;
      }
      
      const finalReply = reply + progressMessage;
      await bot.sendMessage(chatId, finalReply);
      
      // Save message with current module
      saveMessage(chatId, userMessage, finalReply, scenario);
      
      // Feedback triggers (—É–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—ã–µ)
      if (session.messageCount === 3) {
        setTimeout(async () => {
          await bot.sendMessage(chatId, '–ë—ã–ª–æ –ª–∏ –ø–æ–ª–µ–∑–Ω–æ? –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?');
        }, 2000);
      }
      
      // Day 30 completion ritual
      if (access.day === 30 && session.subscription === 'core') {
        setTimeout(async () => {
          const completionMessage = `üéä –†–ò–¢–£–ê–õ –ó–ê–í–ï–†–®–ï–ù–ò–Ø

–¢—ã –ø—Ä–æ—à–µ–ª 30-–¥–Ω–µ–≤–Ω—ã–π –ø—É—Ç—å —Å Hermes.

–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —Ç–≤–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏? 

–ì–æ—Ç–æ–≤ –∫ –∫–∞—Ä—Ç–µ —Ç–≤–æ–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤?`;
          await bot.sendMessage(chatId, completionMessage);
        }, 3000);
      }
      
      console.log(`‚úÖ Response sent to ${firstName} (${scenario})`);
      
    } else {
      await bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å?');
    }
    
  } catch (err) {
    console.error(`üî• Error:`, err.message);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ —Ç–µ–Ω–∏. –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É —è —Å–Ω–æ–≤–∞ —Ä—è–¥–æ–º.');
  }
});

// Error handlers
process.on('SIGTERM', () => {
  console.log(`‚ôªÔ∏è Graceful shutdown ${BOT_VERSION}...`);
  bot.stopPolling();
  process.exit(0);
});

bot.on('polling_error', (error) => {
  console.error(`üî• Polling error:`, error.message);
});

console.log(`‚ö° ${BOT_VERSION} loaded with User Journey System`);
console.log(`üéØ Active modules: Welcome ‚Üí Core ‚Üí Learn ‚Üí Mirror ‚Üí Completion`);






