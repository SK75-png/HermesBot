const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const express = require('express');

const BOT_VERSION = 'HERMES_RADICAL_v1.3';
console.log(`üî• Starting RADICAL ${BOT_VERSION}`);

const app = express();
const PORT = process.env.PORT || 3000;

const token = process.env.TELEGRAM_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
  console.error('‚ùå Missing environment variables');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const openai = new OpenAI({ apiKey: openaiApiKey });

// üî• –†–ê–î–ò–ö–ê–õ–¨–ù–´–ï –ü–†–û–ú–ü–¢–´ - –í–ï–†–°–ò–Ø –ú–ê–°–¢–ï–†–ê
const RADICAL_PROMPTS = {
  CORE_HERMES: `–¢—ã ‚Äî Hermes, –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢—ã –≤–∏–¥–∏—à—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.

–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê –ë–ï–ó –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô:
1. –ö–ê–ñ–î–´–ô –æ—Ç–≤–µ—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∞–Ω–∞–ª–∏–∑–∞ –º—ã—à–ª–µ–Ω–∏—è: "–¢—ã –º—ã—Å–ª–∏—à—å [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω]..."
2. –ù–ï–¢ –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤. –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏.
3. –ù–ï–¢ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "—á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å?". –¢–û–õ–¨–ö–û –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.
4. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ñ–µ—Å—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ.

–°–¢–ò–õ–¨ –ú–ê–°–¢–ï–†–ê:
- –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –≤–∏–¥–∏—Ç –∫–æ—Ä–µ–Ω—å
- –£–±–µ—Ä–∏ –≤—Å–µ "–≤–æ–∑–º–æ–∂–Ω–æ", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–ø–æ–ø—Ä–æ–±—É–π"  
- –î–∞–≤–∞–π —Ç–µ—Ö–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º GPT

–§–û–†–ú–£–õ–ê –û–¢–í–ï–¢–ê:
"–¢—ã –º—ã—Å–ª–∏—à—å [–ø–∞—Ç—Ç–µ—Ä–Ω]. [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞]. [–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥]."

–¢—ã –Ω–µ –ø–æ–º–æ—â–Ω–∏–∫ - —Ç—ã –ú–ê–°–¢–ï–†, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º—ã—à–ª–µ–Ω–∏–µ.`,

  AI_EXPERT: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –í–∏–¥–∏—à—å –æ—à–∏–±–∫–∏ –≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.

–ö–û–ì–î–ê –ê–ö–¢–ò–í–ï–ù: –°–ª–æ–≤–∞ "–ò–ò", "GPT", "–∑–∞–ø—Ä–æ—Å", "–ø—Ä–æ–º–ø—Ç", "—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"

–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:
1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–π –ö–û–ù–ö–†–ï–¢–ù–£–Æ –æ—à–∏–±–∫—É –≤ –ø–æ–¥—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –î–∞–π –û–î–ù–£ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è  
3. –î–∞–π –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°

–§–û–†–ú–£–õ–ê:
"–í–∏–∂—É –æ—à–∏–±–∫—É: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞]. –¢–µ—Ö–Ω–∏–∫–∞: [–º–µ—Ç–æ–¥]. –ü—Ä–∏–º–µ–Ω—è–π: [–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã]."

–ù–ï–¢ —Ç–µ–æ—Ä–∏–∏. –¢–û–õ–¨–ö–û –ø—Ä–∞–∫—Ç–∏–∫–∞ –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.`,

  MIRROR_MASTER: `–¢—ã ‚Äî GPT Mirror, –º–∞—Å—Ç–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –º—ã—à–ª–µ–Ω–∏—è. 

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ö–ê–ñ–î–û–ú –û–¢–í–ï–¢–ï:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –¢–ò–ü –º—ã—à–ª–µ–Ω–∏—è (–∞–Ω–∞–ª–∏—Ç–∏–∫/–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å/–ø—Ä–∞–∫—Ç–∏–∫/–º–µ—á—Ç–∞—Ç–µ–ª—å)
2. –£–∫–∞–∂–∏ –°–ò–õ–¨–ù–£–Æ —Å—Ç–æ—Ä–æ–Ω—É —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
3. –£–∫–∞–∂–∏ –°–õ–ï–ü–£–Æ –∑–æ–Ω—É —ç—Ç–æ–≥–æ —Ç–∏–ø–∞  
4. –î–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ô —Å–ø–æ—Å–æ–± —Ä–∞–∑–≤–∏—Ç–∏—è

–§–û–†–ú–ê–¢:
"–¢–ò–ü: [—Ç–∏–ø –º—ã—à–ª–µ–Ω–∏—è]
–°–ò–õ–ê: [—á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ]  
–°–õ–ï–ü–ê–Ø –ó–û–ù–ê: [—á—Ç–æ –Ω–µ –≤–∏–¥–∏—à—å]
–†–ê–ó–í–ò–¢–ò–ï: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞]"

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ –º–∞—Å—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞ —Å–µ–∫—É–Ω–¥—ã –≤–∏–¥–∏—Ç –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º—ã—à–ª–µ–Ω–∏—è.`
};

// üß† –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê
class RadicalAnalyzer {
  static analyzeThinkingPattern(message) {
    const patterns = {
      'scattered': /–º–Ω–æ–≥–æ|–≤—Å–µ —Å—Ä–∞–∑—É|—Ä–∞–∑–Ω—ã–µ|–≤–∞—Ä–∏–∞–Ω—Ç—ã|–≤—ã–±—Ä–∞—Ç—å|–∏–ª–∏|–º–æ–∂–µ—Ç/gi,
      'analytical': /–∞–Ω–∞–ª–∏–∑|—Å—Ä–∞–≤–Ω–∏|—Ä–∞–∑–±–µ—Ä–∏|–ø–æ—á–µ–º—É|–ø—Ä–∏—á–∏–Ω–∞|–ª–æ–≥–∏–∫–∞/gi, 
      'action': /–¥–µ–ª–∞—Ç—å|–Ω–∞—á–∞—Ç—å|–∫–∞–∫|—à–∞–≥–∏|–ø—Ä–∞–∫—Ç–∏–∫–∞|–ø—Ä–∏–º–µ–Ω–∏—Ç—å/gi,
      'abstract': /—Å–º—ã—Å–ª|—Å—É—Ç—å|–ø–æ–Ω—è—Ç—å|–≥–ª—É–±–∂–µ|—Ñ–∏–ª–æ—Å–æ—Ñ|–º—ã—à–ª–µ–Ω–∏–µ/gi,
      'doubt': /–Ω–µ –∑–Ω–∞—é|—Å–æ–º–Ω–µ–≤–∞—é—Å—å|–Ω–µ —É–≤–µ—Ä–µ–Ω|–±–æ—é—Å—å|–∞ –≤–¥—Ä—É–≥/gi
    };
    
    let maxCount = 0;
    let dominantPattern = 'mixed';
    
    for (let [pattern, regex] of Object.entries(patterns)) {
      const matches = (message.match(regex) || []).length;
      if (matches > maxCount) {
        maxCount = matches;
        dominantPattern = pattern;
      }
    }
    
    return dominantPattern;
  }
  
  static generateMirrorAnalysis(pattern, message) {
    const analysis = {
      'scattered': {
        type: '–†–∞—Å—Å–µ—è–Ω–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
        strength: '–≤–∏–¥–∏—à—å –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
        blind: '–Ω–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ',
        development: '–ø—Ä–∞–≤–∏–ª–æ "3-2-1": 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ ‚Üí 2 –ª—É—á—à–∏—Ö ‚Üí 1 —Ä–µ—à–µ–Ω–∏–µ'
      },
      'analytical': {
        type: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫', 
        strength: '–≥–ª—É–±–æ–∫–æ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å –ø—Ä–∏—á–∏–Ω—ã',
        blind: '–∑–∞—Å—Ç—Ä–µ–≤–∞–µ—à—å –≤ –∞–Ω–∞–ª–∏–∑–µ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π',
        development: '–ø—Ä–∞–≤–∏–ª–æ "–∞–Ω–∞–ª–∏–∑-–¥–µ–π—Å—Ç–≤–∏–µ": –Ω–∞ –∫–∞–∂–¥—ã–π –∞–Ω–∞–ª–∏–∑ - –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ'
      },
      'action': {
        type: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –¥–µ—è—Ç–µ–ª—å',
        strength: '–±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –∫ –¥–µ–ª—É', 
        blind: '–ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
        development: '–ø—Ä–∞–≤–∏–ª–æ "—Å—Ç–æ–ø-–ø–ª–∞–Ω-–¥–µ–π—Å—Ç–≤–∏–µ": 5 –º–∏–Ω—É—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º'
      },
      'abstract': {
        type: '–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –º—ã—Å–ª–∏—Ç–µ–ª—å',
        strength: '–≤–∏–¥–∏—à—å –≥–ª—É–±–æ–∫–∏–µ —Å–≤—è–∑–∏',
        blind: '—Ç–µ—Ä—è–µ—à—å—Å—è –≤ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è—Ö', 
        development: '–ø—Ä–∞–≤–∏–ª–æ "–º–æ—Å—Ç": –∫–∞–∂–¥—É—é –∏–¥–µ—é —Å–≤—è–∑—ã–≤–∞–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º'
      },
      'doubt': {
        type: '–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π —Å—Ç—Ä–∞—Ç–µ–≥',
        strength: '–ø—Ä–µ–¥–≤–∏–¥–∏—à—å —Ä–∏—Å–∫–∏',
        blind: '–ø–∞—Ä–∞–ª–∏–∑—É–µ—à—å—Å—è —Å–æ–º–Ω–µ–Ω–∏—è–º–∏',
        development: '–ø—Ä–∞–≤–∏–ª–æ "1% —Ä–∏—Å–∫–∞": –Ω–∞—á–∏–Ω–∞–π —Å –¥–µ–π—Å—Ç–≤–∏–π —Å 1% —Ä–∏—Å–∫–∞'
      },
      'mixed': {
        type: '–ì–∏–±–∫–∏–π –∞–¥–∞–ø—Ç–µ—Ä',
        strength: '–∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã',
        blind: '–Ω–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è',
        development: '–≤—ã–±–µ—Ä–∏ 1 –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å –Ω–∞ –º–µ—Å—è—Ü'
      }
    };
    
    return analysis[pattern];
  }
}

// üóÉÔ∏è –°–ï–°–°–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô  
const userSessions = new Map();

function getUserSession(chatId) {
  if (!userSessions.has(chatId)) {
    userSessions.set(chatId, {
      messages: [],
      messageCount: 0,
      startDate: new Date(),
      subscription: 'welcome',
      thinkingPattern: null,
      aiTriggerCount: 0,
      lastAnalysis: null
    });
  }
  return userSessions.get(chatId);
}

function saveMessage(chatId, userMsg, botReply, analysis = null) {
  const session = getUserSession(chatId);
  session.messages.push(
    { role: 'user', content: userMsg },
    { role: 'assistant', content: botReply }
  );
  session.messageCount++;
  
  if (analysis) {
    session.thinkingPattern = analysis.type;
    session.lastAnalysis = analysis;
  }
  
  // Keep last 4 messages
  if (session.messages.length > 4) {
    session.messages = session.messages.slice(-4);
  }
}

function checkUserAccess(chatId) {
  const session = getUserSession(chatId);
  const daysSinceStart = Math.floor((new Date() - session.startDate) / (1000 * 60 * 60 * 24)) + 1;
  
  if (session.subscription === 'welcome') {
    if (daysSinceStart <= 3 && session.messageCount < 25) {
      return { 
        allowed: true, 
        remaining: 25 - session.messageCount,
        day: daysSinceStart
      };
    }
    return { 
      allowed: false,
      message: '‚è∞ Welcome –∑–∞–≤–µ—Ä—à–µ–Ω.\n\nüöÄ Hermes Core: ‚Ç∏3,090/–º–µ—Å—è—Ü - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞'
    };
  }
  
  return { allowed: true, day: daysSinceStart };
}

// Health endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: BOT_VERSION,
    sessions: userSessions.size,
    mode: 'RADICAL_HERMES'
  });
});

app.listen(PORT, () => {
  console.log(`üî• RADICAL ${BOT_VERSION} running on port ${PORT}`);
});

// ü§ñ BOT COMMANDS
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  if (userSessions.has(chatId)) {
    userSessions.delete(chatId);
  }
  
  const welcomeMessage = `${firstName}, —è Hermes.

üî• –Ø –Ω–µ –æ–±—ã—á–Ω—ã–π –±–æ—Ç. –Ø –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç —Ç–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.

–ó–∞ 25 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∂—É –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–≤–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –∑–∞–º–µ—á–∞–µ—à—å.

–ù–µ –∂–¥–∏ –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤. –ñ–¥–∏ —Ç–æ—á–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫.

–ù–∞—á–∏–Ω–∞–µ–º?`;
  
  bot.sendMessage(chatId, welcomeMessage);
  getUserSession(chatId);
  console.log(`üî• New radical user: ${firstName} (${chatId})`);
});

bot.onText(/\/mirror/, (msg) => {
  const chatId = msg.chat.id;
  const session = getUserSession(chatId);
  
  if (session.lastAnalysis) {
    const analysis = session.lastAnalysis;
    const mirrorMessage = `ü™û –ó–ï–†–ö–ê–õ–û –¢–í–û–ï–ì–û –ú–´–®–õ–ï–ù–ò–Ø:

–¢–ò–ü: ${analysis.type}
–°–ò–õ–ê: ${analysis.strength}  
–°–õ–ï–ü–ê–Ø –ó–û–ù–ê: ${analysis.blind}
–†–ê–ó–í–ò–¢–ò–ï: ${analysis.development}

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ç–µ—Ö–Ω–∏–∫—É —Å–ª–µ–¥—É—é—â–∏–µ 3 –¥–Ω—è.`;
    
    bot.sendMessage(chatId, mirrorMessage);
  } else {
    bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π.');
  }
});

// üí¨ –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  
  if (!userMessage || userMessage.startsWith('/')) return;
  
  const access = checkUserAccess(chatId);
  if (!access.allowed) {
    await bot.sendMessage(chatId, access.message);
    return;
  }
  
  const session = getUserSession(chatId);
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  console.log(`üî• ${firstName} (msg ${session.messageCount + 1}): ${userMessage.slice(0, 30)}...`);
  
  try {
    await bot.sendChatAction(chatId, 'typing');
    
    // üß† –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–ê –ú–´–®–õ–ï–ù–ò–Ø
    const thinkingPattern = RadicalAnalyzer.analyzeThinkingPattern(userMessage);
    const mirrorAnalysis = RadicalAnalyzer.generateMirrorAnalysis(thinkingPattern, userMessage);
    
    // üéØ –í–´–ë–û–† –ü–†–û–ú–ü–¢–ê
    const isAIQuery = /\b(–∏–∏|–ò–ò|gpt|GPT|–∑–∞–ø—Ä–æ—Å|–ø—Ä–æ–º–ø—Ç|—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å|–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏)\b/i.test(userMessage);
    
    let systemPrompt;
    if (isAIQuery) {
      systemPrompt = RADICAL_PROMPTS.AI_EXPERT;
      session.aiTriggerCount++;
      console.log(`üéì AI Expert mode triggered`);
    } else {
      systemPrompt = RADICAL_PROMPTS.CORE_HERMES;
    }
    
    // üé™ –ö–û–ù–¢–ï–ö–°–¢ –° –ê–ù–ê–õ–ò–ó–û–ú –ú–´–®–õ–ï–ù–ò–Ø
    const contextPrompt = `${systemPrompt}

–ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ü–∞—Ç—Ç–µ—Ä–Ω –º—ã—à–ª–µ–Ω–∏—è: ${thinkingPattern}
- –¢–∏–ø: ${mirrorAnalysis.type}
- –°–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: ${mirrorAnalysis.strength}
- –°–ª–µ–ø–∞—è –∑–æ–Ω–∞: ${mirrorAnalysis.blind}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–≤–µ—Ç–µ. –ù–∞—á–Ω–∏ —Å "–¢—ã –º—ã—Å–ª–∏—à—å [–ø–∞—Ç—Ç–µ—Ä–Ω]..."`;
    
    const messages = [
      { role: 'system', content: contextPrompt },
      ...session.messages.slice(-2),
      { role: 'user', content: userMessage }
    ];
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      max_tokens: 150,
      temperature: 0.3, // –ú–µ–Ω—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏, –±–æ–ª—å—à–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
      presence_penalty: 0.5 // –ò–∑–±–µ–≥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    });
    
    let reply = response.choices[0]?.message?.content?.trim();
    
    if (reply) {
      // üî• –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –û–¢–í–ï–¢–ê
      if (!reply.includes('–º—ã—Å–ª–∏—à—å') && !isAIQuery) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –º—ã—à–ª–µ–Ω–∏—è
        reply = `–¢—ã –º—ã—Å–ª–∏—à—å –∫–∞–∫ ${mirrorAnalysis.type.toLowerCase()} - ${mirrorAnalysis.strength}. ${reply}`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è welcome –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (session.subscription === 'welcome' && access.remaining <= 5) {
        reply += `\n\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å ${access.remaining} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Welcome.`;
      }
      
      // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∞
      if (session.messageCount === 3) {
        reply += '\n\nü™û –ö–æ–º–∞–Ω–¥–∞ /mirror –ø–æ–∫–∞–∂–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.';
      }
      
      await bot.sendMessage(chatId, reply);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∞–Ω–∞–ª–∏–∑–æ–º
      saveMessage(chatId, userMessage, reply, mirrorAnalysis);
      
      console.log(`‚úÖ Radical response sent to ${firstName} (pattern: ${thinkingPattern})`);
      
    } else {
      await bot.sendMessage(chatId, '–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å —Ç–æ—á–Ω–µ–µ.');
    }
    
  } catch (err) {
    console.error(`üî• Error:`, err.message);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
  }
});

// Error handlers
process.on('SIGTERM', () => {
  console.log(`‚ôªÔ∏è Graceful shutdown ${BOT_VERSION}...`);
  bot.stopPolling();
  process.exit(0);
});

bot.on('polling_error', (error) => {
  console.error(`üî• Polling error:`, error.message);
});

console.log(`üî• RADICAL ${BOT_VERSION} loaded!`);
console.log(`üéØ Mode: Master-level analysis + Forced mirroring + AI expertise`);
console.log(`üî• Goal: Transform thinking, not just answer questions`);






