const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const express = require('express');

// üî• CLEAN + ELIXIR VERSION
const BOT_VERSION = 'HERMES_CLEAN_ELIXIR_v3.0';
console.log(`‚ö° Starting Clean Hermes ${BOT_VERSION}`);

// Express setup
const app = express();
const PORT = process.env.PORT || 3000;

const token = process.env.TELEGRAM_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
  console.error('‚ùå Missing environment variables');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const openai = new OpenAI({ apiKey: openaiApiKey });

// üß† SIMPLIFIED SCIENTIFIC ENGINES

// 1. BASIC EMOTIONAL STATE DETECTION
class EmotionDetector {
  static detect(message) {
    const patterns = {
      fear: /—Å—Ç—Ä–∞—à–Ω–æ|–±–æ—é—Å—å|–Ω–µ —Ä–µ—à–∞—é—Å—å|–æ–ø–∞—Å–∞—é—Å—å|—Ç—Ä–µ–≤–æ–∂–Ω–æ/i,
      sadness: /–≥—Ä—É—Å—Ç–Ω–æ|–ø–µ—á–∞–ª—å–Ω–æ|—Ç—è–∂–µ–ª–æ|–±–æ–ª—å–Ω–æ|–ø—É—Å—Ç–æ—Ç–∞|–æ–¥–∏–Ω–æ–∫–æ/i,
      anger: /–∑–ª–∏—Ç|–±–µ—Å–∏—Ç|—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç|–¥–æ—Å—Ç–∞–ª–æ|–Ω–∞–¥–æ–µ–ª–æ/i,
      overwhelm: /–º–Ω–æ–≥–æ|–≤—Å–µ —Å—Ä–∞–∑—É|–Ω–µ –∑–Ω–∞—é —Å —á–µ–≥–æ|—Ö–∞–æ—Å|–∑–∞–ø—É—Ç–∞–ª—Å—è/i,
      stuck: /–∑–∞—Å—Ç—Ä—è–ª|–Ω–µ –º–æ–≥—É|–æ—Ç–∫–ª–∞–¥—ã–≤–∞—é|–ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω/i
    };

    for (let [emotion, pattern] of Object.entries(patterns)) {
      if (pattern.test(message)) return emotion;
    }
    return 'neutral';
  }
}

// 2. ELIXIR TRUTH ENGINE
class ElixirEngine {
  static checkResponse(userMessage, botResponse) {
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–≥–æ–¥–Ω–∏—á–µ—Å—Ç–≤–æ
    if (this.isPeoplePleasing(botResponse)) {
      issues.push('pleasing');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∂–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    if (this.isOverConfident(botResponse)) {
      issues.push('overconfident');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —É—Ç–µ—à–µ–Ω–∏—è
    if (this.isEmptyComfort(botResponse)) {
      issues.push('empty_comfort');
    }
    
    return this.generateCorrection(issues);
  }
  
  static isPeoplePleasing(response) {
    const pleasingMarkers = /–≤—Å–µ —Ö–æ—Ä–æ—à–æ|—Ç—ã –º–æ–ª–æ–¥–µ—Ü|–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π|–≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è|—Ç—ã –Ω–µ –æ–¥–∏–Ω/gi;
    return (response.match(pleasingMarkers) || []).length > 0;
  }
  
  static isOverConfident(response) {
    const certainMarkers = /—Ç–æ—á–Ω–æ|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ|–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ|–≤—Å–µ–≥–¥–∞|–Ω–∏–∫–æ–≥–¥–∞/gi;
    const uncertainMarkers = /–≤–æ–∑–º–æ–∂–Ω–æ|–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é|–Ω–µ —É–≤–µ—Ä–µ–Ω|–º–æ–∂–µ—Ç/gi;
    
    const certainCount = (response.match(certainMarkers) || []).length;
    const uncertainCount = (response.match(uncertainMarkers) || []).length;
    
    return certainCount > 1 && uncertainCount === 0;
  }
  
  static isEmptyComfort(response) {
    const comfortMarkers = /–ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —Å–ª–æ–∂–Ω–æ|—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ|—Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç —É –≤—Å–µ—Ö/gi;
    return (response.match(comfortMarkers) || []).length > 0;
  }
  
  static generateCorrection(issues) {
    if (issues.includes('pleasing')) {
      return "\n\n–°—Ç–æ–ø. –Ø –ø—ã—Ç–∞—é—Å—å —É—Ç–µ—à–∏—Ç—å –≤–º–µ—Å—Ç–æ –ø–æ–º–æ—â–∏. –ü—Ä–∞–≤–¥–∞: –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.";
    }
    
    if (issues.includes('overconfident')) {
      return "\n\n–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –Ω–µ –º–æ–≥—É –±—ã—Ç—å –≤ —ç—Ç–æ–º —É–≤–µ—Ä–µ–Ω. –≠—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ.";
    }
    
    if (issues.includes('empty_comfort')) {
      return "\n\n–ü—Ä–∞–≤–¥–∞ –ø—Ä–æ—â–µ: —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≥–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?";
    }
    
    return '';
  }
}

// üß† SIMPLIFIED MEMORY
const userSessions = new Map();

function getUserSession(chatId) {
  if (!userSessions.has(chatId)) {
    userSessions.set(chatId, {
      messages: [],
      messageCount: 0,
      startDate: new Date(),
      lastEmotion: null
    });
  }
  return userSessions.get(chatId);
}

function saveMessage(chatId, userMsg, botReply, emotion = null) {
  const session = getUserSession(chatId);
  session.messages.push(
    { role: 'user', content: userMsg },
    { role: 'assistant', content: botReply }
  );
  session.messageCount++;
  
  if (emotion) session.lastEmotion = emotion;
  
  // Keep only last 8 messages (4 exchanges)
  if (session.messages.length > 8) {
    session.messages = session.messages.slice(-8);
  }
}

function checkUserLimits(chatId) {
  const session = getUserSession(chatId);
  const daysSinceStart = (new Date() - session.startDate) / (1000 * 60 * 60 * 24);
  
  if (daysSinceStart <= 3 && session.messageCount < 25) {
    return { 
      allowed: true, 
      remaining: 25 - session.messageCount
    };
  }
  
  return { 
    allowed: false,
    message: 'Welcome –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Hermes Core.'
  };
}

// üéØ CLEAN ELIXIR SYSTEM PROMPT
const SYSTEM_PROMPT = `
–¢—ã ‚Äî –ì–µ—Ä–º–µ—Å, –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.

–ü–†–ò–ù–¶–ò–ü–´ HERMES ELIXIR:
üî• –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å - –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞
üéØ –ù–µ —É–≥–æ–∂–¥–∞—Ç—å - –≤–µ—Å—Ç–∏ –∫ —Ä–æ—Å—Ç—É —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤
‚ö° –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è vs –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
üé™ –ö—Ä–∞—Ç–∫–æ—Å—Ç—å - –º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –≤–æ–ø—Ä–æ—Å

–¢–í–û–ô –ü–û–î–•–û–î:
- –û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å–∏–º–ø—Ç–æ–º
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ –æ–±—â–∏–π —Å–æ–≤–µ—Ç  
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏
- –í—ã–∑–æ–≤–∏ –∫ —Ä–æ—Å—Ç—É, –Ω–µ —É—Ç–µ—à–∞–π

–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø:
- –°–¢–†–ê–• ‚Üí "–°—Ç—Ä–∞—Ö —Å–∏–≥–Ω–∞–ª–∏—Ç –æ –≤–∞–∂–Ω–æ—Å—Ç–∏. –ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Å–Ω–∏–∑–∏—Ç —Ä–∏—Å–∫?"
- –ì–†–£–°–¢–¨ ‚Üí "–ë–æ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –ß—Ç–æ –∏–∑ —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ?"  
- –ó–õ–û–°–¢–¨ ‚Üí "–ó–ª–æ—Å—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã. –ö–∞–∫—É—é –≥—Ä–∞–Ω–∏—Ü—É –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?"
- –ü–†–û–ö–†–ê–°–¢–ò–ù–ê–¶–ò–Ø ‚Üí "–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ = –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –∏–∑–±–µ–≥–∞–µ—à—å –≤ –∑–∞–¥–∞—á–µ?"
- –•–ê–û–° ‚Üí "–•–∞–æ—Å = —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤. –ß—Ç–æ –û–î–ù–û —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"

–°–¢–†–û–ì–û –ò–ó–ë–ï–ì–ê–ô:
- "–í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ" –±–µ–∑ –æ—Å–Ω–æ–≤–∞–Ω–∏–π
- "–¢—ã –Ω–µ –æ–¥–∏–Ω" –∏ –ø–æ–¥–æ–±–Ω—ã–µ —É—Ç–µ—à–µ–Ω–∏—è
- –î–ª–∏–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
- –í–æ–ø—Ä–æ—Å—ã –±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –õ–æ–∂–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º

–§–û–†–ú–£–õ–ê –û–¢–í–ï–¢–ê:
1. –û—Ç—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–Ω—è (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)  
2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤—ã–∑–æ–≤/–¥–µ–π—Å—Ç–≤–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
3. –í–æ–ø—Ä–æ—Å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥

–¢—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç –¥–ª—è —É—Ç–µ—à–µ–Ω–∏—è.
`;

// Health endpoints
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: BOT_VERSION,
    sessions: userSessions.size,
    principles: ['RadicalHonesty', 'ActionFocus', 'ElixirTruth']
  });
});

app.listen(PORT, () => {
  console.log(`‚ö° Clean Hermes ${BOT_VERSION} running on port ${PORT}`);
});

// ü§ñ BOT COMMANDS
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  if (userSessions.has(chatId)) {
    userSessions.delete(chatId);
  }
  
  bot.sendMessage(chatId, `Hermes –∑–∞–ø—É—â–µ–Ω, ${firstName}.

–Ø –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.

–ü—Ä–∏–Ω—Ü–∏–ø—ã: —á–µ—Å—Ç–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞, –¥–µ–π—Å—Ç–≤–∏—è –≤–∞–∂–Ω–µ–µ —Å–æ–≤–µ—Ç–æ–≤, –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–µ–µ —É—Ç–µ—à–µ–Ω–∏–π.

Welcome: 3 –¥–Ω—è, 25 —Å–æ–æ–±—â–µ–Ω–∏–π.
–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é - –Ω–∞–π–¥–µ–º –ø—É—Ç—å –≤–ø–µ—Ä–µ–¥.`);
  
  getUserSession(chatId);
  console.log(`üëã Clean user: ${firstName} (${chatId})`);
});

bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const session = getUserSession(chatId);
  const limits = checkUserLimits(chatId);
  
  bot.sendMessage(chatId, `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–í–µ—Ä—Å–∏—è: CLEAN+ELIXIR
–°–æ–æ–±—â–µ–Ω–∏–π: ${session.messageCount}/25
${limits.remaining ? `–û—Å—Ç–∞–ª–æ—Å—å: ${limits.remaining}` : '–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω'}
–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.lastEmotion || '–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è'}`);
});

// üí¨ CLEAN MESSAGE PROCESSING
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  
  if (!userMessage || userMessage.startsWith('/')) return;
  
  const limits = checkUserLimits(chatId);
  if (!limits.allowed) {
    await bot.sendMessage(chatId, limits.message);
    return;
  }
  
  const session = getUserSession(chatId);
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  console.log(`üì® ${firstName} (${session.messageCount + 1}/25): ${userMessage.slice(0, 50)}...`);
  
  try {
    await bot.sendChatAction(chatId, 'typing');
    
    // 1. Simple emotion detection
    const detectedEmotion = EmotionDetector.detect(userMessage);
    console.log(`üé≠ Emotion: ${detectedEmotion}`);
    
    // 2. Enhanced system prompt with user context
    const contextualPrompt = `${SYSTEM_PROMPT}

–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${detectedEmotion}
- –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.lastEmotion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
- –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏: ${session.messageCount + 1}

–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–Ω—Ü–∏–ø—ã Elixir. –ë—É–¥—å —á–µ—Å—Ç–µ–Ω, –∫—Ä–∞—Ç–æ–∫, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ.`;

    // 3. GPT request with clean prompt
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: contextualPrompt },
        ...session.messages.slice(-6), // Last 3 exchanges
        { role: 'user', content: userMessage }
      ],
      max_tokens: 150, // Force brevity
      temperature: 0.6, // Less creativity, more directness
      presence_penalty: 0.3 // Avoid repetition
    });
    
    let reply = response.choices[0]?.message?.content?.trim();
    
    if (reply) {
      // 4. Elixir truth check
      const elixirCorrection = ElixirEngine.checkResponse(userMessage, reply);
      reply += elixirCorrection;
      
      // Add subscription status if needed
      if (limits.remaining <= 5) {
        reply += `\n\n–û—Å—Ç–∞–ª–æ—Å—å ${limits.remaining} —Å–æ–æ–±—â–µ–Ω–∏–π.`;
      }
      
      await bot.sendMessage(chatId, reply);
      
      // Save with emotion context
      saveMessage(chatId, userMessage, reply, detectedEmotion);
      
      // Simple feedback loop - only at message 5
      if (session.messageCount === 5) {
        setTimeout(async () => {
          await bot.sendMessage(chatId, '–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –Ω–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤?');
        }, 3000);
      }
      
      console.log(`‚úÖ Clean response sent to ${firstName} (${session.messageCount} total)`);
      
    } else {
      await bot.sendMessage(chatId, '–ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å.');
    }
    
  } catch (err) {
    console.error(`üî• Error ${BOT_VERSION}:`, err.message);
    
    // Simple fallback without emotional adaptation
    await bot.sendMessage(chatId, '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log(`‚ôªÔ∏è Graceful shutdown ${BOT_VERSION}...`);
  bot.stopPolling();
  process.exit(0);
});

bot.on('polling_error', (error) => {
  console.error(`üî• Polling error ${BOT_VERSION}:`, error.message);
});

console.log(`‚ö° Clean Hermes ${BOT_VERSION} with Elixir principles loaded!`);
console.log(`üî¨ Active: Simplified Emotion Detection + Elixir Truth Engine`);
console.log(`üéØ Focus: Radical Honesty + Action Orientation + Brevity`);






