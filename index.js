// üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');

// üìå Assistants API
const ASSISTANT_ID = process.env.ASSISTANT_ID;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;

if (!ASSISTANT_ID || !OPENAI_API_KEY || !TELEGRAM_TOKEN) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

// üåê Express —Å–µ—Ä–≤–µ—Ä
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/health', (req, res) => {
  res.json({ status: 'ok', version: 'MVP_1.1_FIXED', timestamp: new Date().toISOString() });
});

app.listen(PORT, () => {
  console.log(`üöÄ Hermes 1.0 listening on port ${PORT}`);
});

// ü§ñ Telegram –±–æ—Ç
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–π
const userThreads = new Map();

// üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Assistants API
async function getAssistantReply(chatId, userMessage) {
  let threadId = userThreads.get(chatId);

  // 1. –°–æ–∑–¥–∞—Ç—å –Ω–∏—Ç—å –µ—Å–ª–∏ –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (!threadId) {
    const threadRes = await axios.post(
      'https://api.openai.com/v1/threads',
      {},
      { headers: { Authorization: `Bearer ${OPENAI_API_KEY}` } }
    );
    threadId = threadRes.data.id;
    userThreads.set(chatId, threadId);
  }

  // 2. –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await axios.post(
    `https://api.openai.com/v1/threads/${threadId}/messages`,
    { role: 'user', content: userMessage },
    { headers: { Authorization: `Bearer ${OPENAI_API_KEY}` } }
  );

  // 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  const run = await axios.post(
    `https://api.openai.com/v1/threads/${threadId}/runs`,
    { assistant_id: ASSISTANT_ID },
    { headers: { Authorization: `Bearer ${OPENAI_API_KEY}` } }
  );

  // 4. –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  let status = 'queued';
  let result;
  while (status !== 'completed') {
    await new Promise((r) => setTimeout(r, 1000));
    result = await axios.get(
      `https://api.openai.com/v1/threads/${threadId}/runs/${run.data.id}`,
      { headers: { Authorization: `Bearer ${OPENAI_API_KEY}` } }
    );
    status = result.data.status;
  }

  // 5. –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  const messages = await axios.get(
    `https://api.openai.com/v1/threads/${threadId}/messages`,
    { headers: { Authorization: `Bearer ${OPENAI_API_KEY}` } }
  );

  const reply = messages.data.data.find((m) => m.role === 'assistant');
  return reply?.content?.[0]?.text?.value || '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
}

// üí¨ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;

  if (!userMessage || userMessage.startsWith('/')) return;

  try {
    await bot.sendChatAction(chatId, 'typing');
    const reply = await getAssistantReply(chatId, userMessage);
    await bot.sendMessage(chatId, reply, { parse_mode: 'Markdown' });
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞:', err.message);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
  }
});







