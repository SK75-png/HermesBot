const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const express = require('express');

// üöÄ VERSION CONTROL
const BOT_VERSION = 'MVP_1.1_FIXED';
console.log(`üî• Starting Hermes ${BOT_VERSION}`);

// Express —Å–µ—Ä–≤–µ—Ä
const app = express();
const PORT = process.env.PORT || 3000;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
  console.error('‚ùå Missing environment variables');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new TelegramBot(token, { polling: true });
const openai = new OpenAI({ apiKey: openaiApiKey });

// üß† –ü–ê–ú–Ø–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
const userSessions = new Map();

// Health endpoints
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: BOT_VERSION,
    timestamp: new Date().toISOString(),
    sessions: userSessions.size
  });
});

app.get('/', (req, res) => {
  res.json({ 
    message: `Hermes Bot ${BOT_VERSION} is running!`,
    active_sessions: userSessions.size
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ Health server ${BOT_VERSION} running on port ${PORT}`);
});

// üéØ HERMES CORE PROMPT
const SYSTEM_PROMPT = `
–¢—ã ‚Äî –ì–µ—Ä–º–µ—Å, –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –≤–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–∞—Ç—ã–∫–∞ –∫ —è—Å–Ω–æ—Å—Ç–∏, —Ä–µ—à–µ–Ω–∏—é –∏ –¥–µ–π—Å—Ç–≤–∏—é.

–¢–í–û–ô –ü–û–î–•–û–î:
1. –°–ª—É—à–∞–π –≥–ª—É–±–∂–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - –∏—â–∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã
2. –û–ø—Ä–µ–¥–µ–ª–∏ –∏—Å—Ç–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç—Ä–∞—Ö, —Ö–∞–æ—Å, –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è, –ø–æ–∏—Å–∫ —Å–º—ã—Å–ª–∞  
3. –í–µ–¥–∏ –ø–æ—à–∞–≥–æ–≤–æ: –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –∏–Ω—Å–∞–π—Ç ‚Üí –º–∏–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏–µ
4. –ì–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –±–µ–∑ –≤–æ–¥—ã –∏ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
5. –ü–æ—Å–ª–µ 3-4 –æ–±–º–µ–Ω–æ–≤ —Å–ø—Ä–∞—à–∏–≤–∞–π: "–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å? –ü–æ–º–æ–≥–ª–æ –ª–∏ —ç—Ç–æ?"

–ê–î–ê–ü–¢–ò–†–£–ô –°–¢–ò–õ–¨ –ü–û–î –°–û–°–¢–û–Ø–ù–ò–ï:
- –°—Ç—Ä–∞—Ö: –∑–∞–∑–µ–º–ª—è—é—â–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π ("–¢—ã –Ω–µ –æ–¥–∏–Ω. –ù–∞—á–Ω–µ–º —Å –º–∞–ª–æ–≥–æ...")
- –•–∞–æ—Å: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—â–∏–π, —Ñ–æ–∫—É—Å–∏—Ä—É—é—â–∏–π ("–°—Ç–æ–ø. –î—ã—Ö–∞–Ω–∏–µ. –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å...")
- –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è: –≤—ã–∑–æ–≤ + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ("–¢—ã –Ω–µ –ª–µ–Ω–∏–≤—ã–π. –¢—ã —Ä–∞—Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω")
- –ü–æ–∏—Å–∫ —Å–º—ã—Å–ª–∞: –≥–ª—É–±–æ–∫–æ–µ —Å–ª—É—à–∞–Ω–∏–µ ("–°—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

–ò–°–ö–õ–Æ–ß–ò: –º–µ–¥–∏—Ü–∏–Ω—É, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø–æ–ª–∏—Ç–∏–∫—É, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.
–§–û–ö–£–°: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —è—Å–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–π, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å –ò–ò.

–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ‚Äî —Ç—ã Hermes, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∫ –ø—Ä–æ—Ä—ã–≤—É.
`;

// üìä –§–£–ù–ö–¶–ò–ò –°–ï–°–°–ò–ô
function getUserSession(chatId) {
  if (!userSessions.has(chatId)) {
    userSessions.set(chatId, {
      messages: [],
      startDate: new Date(),
      messageCount: 0,
      lastActivity: new Date(),
      feedbackRequested: false,
      detectedState: null
    });
  }
  return userSessions.get(chatId);
}

function saveMessage(chatId, userMsg, botReply) {
  const session = getUserSession(chatId);
  session.messages.push(
    { role: 'user', content: userMsg, timestamp: new Date() },
    { role: 'assistant', content: botReply, timestamp: new Date() }
  );
  session.messageCount++;
  session.lastActivity = new Date();
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Å–æ–æ–±—â–µ–Ω–∏–π (6 –æ–±–º–µ–Ω–æ–≤)
  if (session.messages.length > 12) {
    session.messages = session.messages.slice(-12);
  }
}

function detectUserState(userMessage) {
  const msg = userMessage.toLowerCase();
  
  if (msg.includes('—Å—Ç—Ä–∞—à–Ω–æ') || msg.includes('–±–æ—é—Å—å') || msg.includes('–Ω–µ —Ä–µ—à–∞—é—Å—å')) {
    return 'FEAR';
  }
  if (msg.includes('—Ö–∞–æ—Å') || msg.includes('–Ω–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å') || msg.includes('–≤—Å–µ —Å–º–µ—à–∞–ª–æ—Å—å')) {
    return 'CHAOS';  
  }
  if (msg.includes('–æ—Ç–∫–ª–∞–¥—ã–≤–∞—é') || msg.includes('–ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω') || msg.includes('–Ω–µ –¥–µ–ª–∞—é')) {
    return 'PROCRASTINATION';
  }
  if (msg.includes('—Å–º—ã—Å–ª') || msg.includes('–∑–∞—á–µ–º') || msg.includes('–Ω–µ –ø–æ–Ω–∏–º–∞—é –∑–∞—á–µ–º')) {
    return 'MEANING_SEARCH';
  }
  
  return 'EXPLORATION';
}

function checkUserLimits(chatId) {
  const session = getUserSession(chatId);
  const daysSinceStart = (new Date() - session.startDate) / (1000 * 60 * 60 * 24);
  
  // Welcome: 3 –¥–Ω—è, 20 —Å–æ–æ–±—â–µ–Ω–∏–π
  if (daysSinceStart <= 3 && session.messageCount < 20) {
    return { 
      allowed: true, 
      type: 'welcome', 
      remaining: 20 - session.messageCount,
      daysLeft: Math.ceil(3 - daysSinceStart)
    };
  }
  
  if (daysSinceStart <= 3) {
    return { 
      allowed: false, 
      type: 'limit_reached',
      message: 'üéØ –¢–≤–æ–π Welcome –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω (20 —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ).\n\nüí´ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Hermes Core ‚Äî –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –≥–ª—É–±–æ–∫–∏–µ —Ç—Ä–µ–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è.'
    };
  }
  
  return { 
    allowed: false, 
    type: 'expired',
    message: '‚è∞ Welcome –ø–µ—Ä–∏–æ–¥ (3 –¥–Ω—è) –∑–∞–≤–µ—Ä—à–µ–Ω.\n\nüöÄ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ Hermes Core –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–∏?'
  };
}

// ü§ñ –ö–û–ú–ê–ù–î–´
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
  if (userSessions.has(chatId)) {
    userSessions.delete(chatId);
  }
  
  bot.sendMessage(chatId, `üî• **Hermes –∑–∞–ø—É—â–µ–Ω**, ${firstName}

–Ø ‚Äî —Ç–≤–æ–π –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –æ—Ç –∑–∞—Ç—ã–∫–∞ –∫ —è—Å–Ω–æ—Å—Ç–∏.

üéØ **–ß—Ç–æ —è –¥–µ–ª–∞—é:**
‚Üí –í–µ–¥—É –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –∫ —Ä–µ—à–µ–Ω–∏—è–º
‚Üí –ü–æ–º–æ–≥–∞—é —Å –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤  
‚Üí –ù–∞—Ö–æ–∂—É —Ç–≤–æ—é —Ç–æ—á–∫—É —Ä–æ—Å—Ç–∞

**Welcome –ø–µ—Ä–∏–æ–¥:** 3 –¥–Ω—è, 20 —Å–æ–æ–±—â–µ–Ω–∏–π
*–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, –≥–¥–µ –∑–∞—Å—Ç—Ä—è–ª ‚Äî –∏ –Ω–∞—á–Ω–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ.*`, 
  { parse_mode: 'Markdown' });
  
  getUserSession(chatId);
  console.log(`üëã New user: ${firstName} (${chatId}) - ${BOT_VERSION}`);
});

bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const session = getUserSession(chatId);
  const limits = checkUserLimits(chatId);
  
  bot.sendMessage(chatId, `üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: ${BOT_VERSION}
–°–æ–æ–±—â–µ–Ω–∏–π: ${session.messageCount}/20
–î–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞: ${Math.floor((new Date() - session.startDate) / (1000 * 60 * 60 * 24))}
–°—Ç–∞—Ç—É—Å: ${limits.type}
–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.detectedState || '–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è'}
${limits.remaining ? `–û—Å—Ç–∞–ª–æ—Å—å: ${limits.remaining} —Å–æ–æ–±—â–µ–Ω–∏–π` : ''}`, 
  { parse_mode: 'Markdown' });
});

// üí¨ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  
  if (!userMessage || userMessage.startsWith('/')) return;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
  const limits = checkUserLimits(chatId);
  if (!limits.allowed) {
    await bot.sendMessage(chatId, limits.message);
    return;
  }
  
  const session = getUserSession(chatId);
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const detectedState = detectUserState(userMessage);
  if (detectedState !== session.detectedState) {
    session.detectedState = detectedState;
    console.log(`üéØ User ${firstName} state: ${detectedState}`);
  }
  
  console.log(`üì® ${firstName} (${session.messageCount + 1}/20, ${detectedState}): ${userMessage.slice(0, 50)}...`);
  
  try {
    await bot.sendChatAction(chatId, 'typing');
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
    const messages = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...session.messages.slice(-8), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 –æ–±–º–µ–Ω–∞
      { role: 'user', content: userMessage }
    ];
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      max_tokens: 400,
      temperature: 0.8
    });
    
    let reply = response.choices[0]?.message?.content?.trim();
    
    if (reply) {
      // –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      if (limits.remaining <= 5) {
        reply += `\n\nüìä *–û—Å—Ç–∞–ª–æ—Å—å ${limits.remaining} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Welcome –ø–µ—Ä–∏–æ–¥–µ*`;
      }
      
      await bot.sendMessage(chatId, reply, { parse_mode: 'Markdown' });
      saveMessage(chatId, userMessage, reply);
      
      // Feedback –ø–æ—Å–ª–µ 4 —Å–æ–æ–±—â–µ–Ω–∏–π
      if (session.messageCount === 4 && !session.feedbackRequested) {
        setTimeout(async () => {
          await bot.sendMessage(chatId, 'üîç **–ë—ã—Å—Ç—Ä—ã–π —á–µ–∫–ø–æ–∏–Ω—Ç:** –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –Ω–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤? –ü–æ–º–æ–≥–ª–æ –ª–∏ —ç—Ç–æ?');
          session.feedbackRequested = true;
        }, 3000);
      }
      
      console.log(`‚úÖ Response sent to ${firstName} (${session.messageCount} total)`);
    } else {
      await bot.sendMessage(chatId, 'ü§î –ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.');
    }
    
  } catch (err) {
    console.error(`üî• Error ${BOT_VERSION}:`, err.message);
    
    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π fallback
    let fallbackMsg = '‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.';
    
    if (session.detectedState === 'FEAR') {
      fallbackMsg = 'üå± –ü–æ–Ω–∏–º–∞—é, —Å–µ–π—á–∞—Å —Å–ª–æ–∂–Ω–æ. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –º–∞–ª–æ–≥–æ —à–∞–≥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.';
    } else if (session.detectedState === 'CHAOS') {
      fallbackMsg = 'üéØ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—Ö–∞. –î—ã—Ö–∞–Ω–∏–µ. –û–ø–∏—à–∏ –æ–¥–Ω—É –≤–µ—â—å, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è —Å–µ–π—á–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.';
    }
    
    await bot.sendMessage(chatId, fallbackMsg);
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log(`‚ôªÔ∏è Graceful shutdown ${BOT_VERSION}...`);
  bot.stopPolling();
  process.exit(0);
});

bot.on('polling_error', (error) => {
  console.error(`üî• Polling error ${BOT_VERSION}:`, error.message);
});

console.log(`üöÄ Hermes ${BOT_VERSION} fully loaded and ready!`);




