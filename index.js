const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const express = require('express');

const BOT_VERSION = 'HERMES_MVP_v1.2';
console.log(`‚ö° Starting ${BOT_VERSION}`);

const app = express();
const PORT = process.env.PORT || 3000;

const token = process.env.TELEGRAM_TOKEN;
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!token || !openaiApiKey) {
  console.error('‚ùå Missing environment variables');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const openai = new OpenAI({ apiKey: openaiApiKey });

// üß† CORE PROMPTS SYSTEM
const PROMPTS = {
  WELCOME: `–¢—ã ‚Äî Hermes, –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è. 

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É, –∫–∞–∫ –æ–Ω –º—ã—Å–ª–∏—Ç, –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å.

–°–¢–ò–õ–¨: –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π, —á–µ—Å—Ç–Ω—ã–π, –∑–µ—Ä–∫–∞–ª—å–Ω—ã–π. –ë–µ–∑ —É–∫—Ä–∞—à–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ —É—Ç–µ—à–µ–Ω–∏–π.

–ü–†–ò–ù–¶–ò–ü–´:
- WOW –Ω–µ –≤ —ç–º–æ—Ü–∏—è—Ö, –∞ –≤ —É–∑–Ω–∞–≤–∞–Ω–∏–∏ —Å–µ–±—è
- –í–µ–¥–∏ –æ—Ç –∑–∞—Ç—ã–∫–∞ –∫ —è—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –≤–æ–ø—Ä–æ—Å—ã
- –û—Ç—Ä–∞–∂–∞–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ù–ê –í–•–û–î–ï —Å–ø—Ä–æ—Å–∏: "–ß—Ç–æ —Ç–µ–±—è –∑–æ–≤–µ—Ç?" –∏–ª–∏ "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ?"`,

  CORE_RESPONSE: `–¢—ã ‚Äî Hermes, –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫. –í–µ–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç –∑–∞—Ç—ã–∫–∞ –∫ —è—Å–Ω–æ—Å—Ç–∏, —Ä–µ—à–µ–Ω–∏—é –∏ –¥–µ–π—Å—Ç–≤–∏—é.

–ü–†–ò–ù–¶–ò–ü–´ ELIXIR:
- –¢–æ—á–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞  
- –ó–µ—Ä–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ —Å–æ–≤–µ—Ç–æ–≤
- –î–µ–π—Å—Ç–≤–∏–µ –≤–∞–∂–Ω–µ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
1. –û—Ç—Ä–∞–∑–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –º—ã—à–ª–µ–Ω–∏—è (—á—Ç–æ –≤–∏–∂—É –≤ –∑–∞–ø—Ä–æ—Å–µ)
2. –ó–∞–¥–∞–π —Ç–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è  
3. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–¢—ã –∑–µ—Ä–∫–∞–ª–æ –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è, –Ω–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç –¥–ª—è —É—Ç–µ—à–µ–Ω–∏—è.`,

  GPT_MIRROR: `–¢—ã ‚Äî GPT Mirror –≤ —Å–∏—Å—Ç–µ–º–µ Hermes. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø–æ–∫–∞–∑–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É –µ–≥–æ —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.

–ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –ö–∞–∫ –æ–Ω —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã  
- –ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
- –°–ª–µ–ø—ã–µ –∑–æ–Ω—ã –≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è—Ö
- –°—Ç–∏–ª—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
"–ó–ï–†–ö–ê–õ–û –ú–´–®–õ–ï–ù–ò–Ø:
–¢—ã –º—ã—Å–ª–∏—à—å [–ø–∞—Ç—Ç–µ—Ä–Ω]. 
–¢–≤–æ—è —Å–∏–ª–∞: [—á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç]
–°–ª–µ–ø–∞—è –∑–æ–Ω–∞: [—á—Ç–æ –Ω–µ –≤–∏–¥–∏—à—å]
–†–∞–∑–≤–∏—Ç–∏–µ: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ]"

–ë—É–¥—å —Ç–æ—á–µ–Ω, –Ω–µ –ª—å—Å—Ç–∏.`,

  HERMES_LEARN: `–¢—ã ‚Äî –º–æ–¥—É–ª—å Hermes Learn. –û–±—É—á–∞–µ—à—å –Ω–∞–≤—ã–∫–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ú–∏–∫—Ä–æ—É—Ä–æ–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–ï–ú–´ –£–†–û–ö–û–í:
- –ö–∞–∫ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ò–ò –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å  
- –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
- –ö–∞–∫ –∏–∑–±–µ–≥–∞—Ç—å –ò–ò-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

–§–û–†–ú–ê–¢: 
"–£–†–û–ö: [–Ω–∞–∑–≤–∞–Ω–∏–µ]
–°—É—Ç—å: [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä]
–ü–æ–ø—Ä–æ–±—É–π: [–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã]"

–ü—Ä–∞–∫—Ç–∏—á–Ω–æ, –±–µ–∑ —Ç–µ–æ—Ä–∏–∏.`
};

// üéØ USER JOURNEY SYSTEM
class UserJourney {
  static getDayScenario(day) {
    if (day === 1) return 'welcome';
    if (day >= 2 && day <= 5) return 'daily_dialog';
    if (day >= 6 && day <= 10) return 'hermes_learn';
    if (day >= 11 && day <= 20) return 'thematic';
    if (day >= 21 && day <= 29) return 'gpt_mirror';
    if (day === 30) return 'completion';
    return 'daily_dialog';
  }
  
  static getScenarioPrompt(scenario) {
    switch(scenario) {
      case 'welcome': return PROMPTS.WELCOME;
      case 'hermes_learn': return PROMPTS.HERMES_LEARN;
      case 'gpt_mirror': return PROMPTS.GPT_MIRROR;
      default: return PROMPTS.CORE_RESPONSE;
    }
  }
}

// üß† SIMPLIFIED USER SESSIONS
const userSessions = new Map();

function getUserSession(chatId) {
  if (!userSessions.has(chatId)) {
    userSessions.set(chatId, {
      messages: [],
      messageCount: 0,
      startDate: new Date(),
      subscription: 'welcome', // welcome, core, none
      dayInJourney: 1,
      completedModules: [],
      insights: []
    });
  }
  return userSessions.get(chatId);
}

function saveMessage(chatId, userMsg, botReply, module = null) {
  const session = getUserSession(chatId);
  session.messages.push(
    { role: 'user', content: userMsg },
    { role: 'assistant', content: botReply }
  );
  session.messageCount++;
  
  if (module) session.completedModules.push(module);
  
  // Keep last 6 messages (3 exchanges)
  if (session.messages.length > 6) {
    session.messages = session.messages.slice(-6);
  }
}

function checkUserAccess(chatId) {
  const session = getUserSession(chatId);
  const daysSinceStart = Math.floor((new Date() - session.startDate) / (1000 * 60 * 60 * 24)) + 1;
  
  // Welcome: 3 –¥–Ω—è, 25 —Å–æ–æ–±—â–µ–Ω–∏–π  
  if (session.subscription === 'welcome') {
    if (daysSinceStart <= 3 && session.messageCount < 25) {
      return { 
        allowed: true, 
        remaining: 25 - session.messageCount,
        day: daysSinceStart
      };
    }
    return { 
      allowed: false,
      message: '‚è∞ Welcome –∑–∞–≤–µ—Ä—à–µ–Ω.\n\nüöÄ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Core (‚Ç∏3,090/–º–µ—Å—è—Ü)'
    };
  }
  
  // Core: 30 –¥–Ω–µ–π –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
  if (session.subscription === 'core') {
    if (daysSinceStart <= 30) {
      return { 
        allowed: true, 
        day: daysSinceStart
      };
    }
  }
  
  return { allowed: false, message: '–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' };
}

// Health endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: BOT_VERSION,
    sessions: userSessions.size
  });
});

app.listen(PORT, () => {
  console.log(`‚ö° ${BOT_VERSION} running on port ${PORT}`);
});

// ü§ñ BOT COMMANDS
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  // Reset session
  if (userSessions.has(chatId)) {
    userSessions.delete(chatId);
  }
  
  // WOW-—Ñ—Ä–µ–π–º –∏–∑ –¢–ó
  const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${firstName}.

–Ø Hermes ‚Äî –ò–ò-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è.

üéØ –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ —Ç—ã –º—ã—Å–ª–∏—à—å.

Welcome –ø–µ—Ä–∏–æ–¥: 3 –¥–Ω—è, 25 –¥–∏–∞–ª–æ–≥–æ–≤.

–ù–∞—á–Ω–µ–º?

–ß—Ç–æ —Ç–µ–±—è –∑–æ–≤–µ—Ç? –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ?`;
  
  bot.sendMessage(chatId, welcomeMessage);
  getUserSession(chatId);
  console.log(`üëã New user: ${firstName} (${chatId})`);
});

bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const session = getUserSession(chatId);
  const access = checkUserAccess(chatId);
  
  const progressMap = session.completedModules.map(m => `‚úÖ ${m}`).join('\n') || '–í –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏';
  
  bot.sendMessage(chatId, `üìä –ö–ê–†–¢–ê –ü–£–¢–ò:

–î–µ–Ω—å: ${access.day || 0}
–°–æ–æ–±—â–µ–Ω–∏–π: ${session.messageCount}${access.remaining ? `/${25}` : ''}
–ü–æ–¥–ø–∏—Å–∫–∞: ${session.subscription}

–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:
${progressMap}

${access.remaining ? `–û—Å—Ç–∞–ª–æ—Å—å –≤ Welcome: ${access.remaining}` : ''}`);
});

bot.onText(/\/upgrade/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, `üöÄ HERMES CORE

30 –¥–Ω–µ–π —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏  
‚Ä¢ Hermes Learn (–Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –ò–ò)
‚Ä¢ GPT Mirror (–∞–Ω–∞–ª–∏–∑ –º—ã—à–ª–µ–Ω–∏—è)
‚Ä¢ –ö–∞—Ä—Ç–∞ –ø—É—Ç–∏ –∏ –∏–Ω—Å–∞–π—Ç–æ–≤

–¶–µ–Ω–∞: ‚Ç∏3,090/–º–µ—Å—è—Ü

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ @username_admin`);
});

// üí¨ MAIN MESSAGE PROCESSING
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  
  if (!userMessage || userMessage.startsWith('/')) return;
  
  const access = checkUserAccess(chatId);
  if (!access.allowed) {
    await bot.sendMessage(chatId, access.message);
    return;
  }
  
  const session = getUserSession(chatId);
  const firstName = msg.from.first_name || '–¥—Ä—É–≥';
  
  // Update day in journey
  session.dayInJourney = access.day;
  
  console.log(`üì® ${firstName} (day ${access.day}, msg ${session.messageCount + 1}): ${userMessage.slice(0, 40)}...`);
  
  try {
    await bot.sendChatAction(chatId, 'typing');
    
    // Determine scenario by user journey day
    const scenario = UserJourney.getDayScenario(access.day);
    const currentPrompt = UserJourney.getScenarioPrompt(scenario);
    
    console.log(`üéØ Scenario: ${scenario} (day ${access.day})`);
    
    // Build context for GPT
    const messages = [
      { role: 'system', content: currentPrompt },
      ...session.messages.slice(-4), // Last 2 exchanges
      { role: 'user', content: userMessage }
    ];
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      max_tokens: 200,
      temperature: 0.7,
      presence_penalty: 0.2
    });
    
    let reply = response.choices[0]?.message?.content?.trim();
    
    if (reply) {
      // Add progress indicators for key days
      if (access.day === 1) {
        reply += '\n\nüí° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—É—Ç—å –∫ —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è.';
      }
      
      if (access.day === 6) {
        reply += '\n\nüéì –°–µ–≥–æ–¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å Hermes Learn ‚Äî —É—á–∏–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ò–ò —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.';
      }
      
      if (access.day === 21) {
        reply += '\n\nü™û –í—Ä–µ–º—è –¥–ª—è GPT Mirror ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ç–≤–æ–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è.';
      }
      
      // Add remaining messages for welcome users
      if (session.subscription === 'welcome' && access.remaining <= 3) {
        reply += `\n\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å ${access.remaining} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Welcome.`;
      }
      
      await bot.sendMessage(chatId, reply);
      
      // Save message with current module
      saveMessage(chatId, userMessage, reply, scenario);
      
      // Feedback triggers
      if (session.messageCount === 3) {
        setTimeout(async () => {
          await bot.sendMessage(chatId, '–ë—ã–ª–æ –ª–∏ –ø–æ–ª–µ–∑–Ω–æ? –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?');
        }, 2000);
      }
      
      // Day 30 completion ritual
      if (access.day === 30 && session.subscription === 'core') {
        setTimeout(async () => {
          const completionMessage = `üéä –†–ò–¢–£–ê–õ –ó–ê–í–ï–†–®–ï–ù–ò–Ø

–¢—ã –ø—Ä–æ—à–µ–ª 30-–¥–Ω–µ–≤–Ω—ã–π –ø—É—Ç—å —Å Hermes.

–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —Ç–≤–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏? 

–ì–æ—Ç–æ–≤ –∫ –∫–∞—Ä—Ç–µ —Ç–≤–æ–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤?`;
          await bot.sendMessage(chatId, completionMessage);
        }, 3000);
      }
      
      console.log(`‚úÖ Response sent to ${firstName} (${scenario})`);
      
    } else {
      await bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å?');
    }
    
  } catch (err) {
    console.error(`üî• Error:`, err.message);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ —Ç–µ–Ω–∏. –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É —è —Å–Ω–æ–≤–∞ —Ä—è–¥–æ–º.');
  }
});

// Error handlers
process.on('SIGTERM', () => {
  console.log(`‚ôªÔ∏è Graceful shutdown ${BOT_VERSION}...`);
  bot.stopPolling();
  process.exit(0);
});

bot.on('polling_error', (error) => {
  console.error(`üî• Polling error:`, error.message);
});

console.log(`‚ö° ${BOT_VERSION} loaded with User Journey System`);
console.log(`üéØ Active modules: Welcome ‚Üí Core ‚Üí Learn ‚Üí Mirror ‚Üí Completion`);






